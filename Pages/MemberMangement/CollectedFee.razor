@* @page "/collected-fee"
@using Membership_Management_UI.Models
@using Membership_Management_UI.Services

@inject IFeeCollectionService fService
@inject IMemberService mService


<div class="row">
    <div class="col-lg-9">
        <h3>All Fee Collections</h3>
    </div>
    <div class="col-lg-3 text-right">
        <a href="/fee-collection/add" role="button" class="btn btn-secondary btn-sm">Collect Fee</a>
    </div>
</div>

@if (feeCollections == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Collection Date</th>
                <th>Collection Type</th>
                <th>Amount</th>
                <th>Member</th>
            </tr>
        </thead>
        <tbody>
            @if (feeCollections.Any())
            {
                @foreach (var feeCollection in feeCollections)
                {
                    <tr>
                        <td>@feeCollection.CollectionDate.ToShortDateString()</td>
                        <td>@feeCollection.CollectionType</td>
                        <td>@feeCollection.Amount</td>
                        <td>
                            @if (feeCollection.MemberId != null)
                            {
                                var member = members.FirstOrDefault(m => m.MemberId == feeCollection.MemberId);
                                if (member != null)
                                {
                                 
                                    @($"{member.MemberId} - {member.Name}")
                                }
                                else
                                {
                                    <span>Member not found</span>
                                }
                            }
                            else
                            {
                                <span>No member associated</span>
                            }
                        </td>
                    </tr>
                }
            }



            else
            {
                <tr>
                    <td colspan="5">No fee collections found.</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FeeCollection> feeCollections;
    private List<Member> members;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            feeCollections = await fService.GetCollectedFee();
            members = await mService.GetAllMembers();
        }
        catch (Exception ex)
        {
            throw new ArgumentException("api issue");
        }
    }

    private void EditFeeCollection(int feeCollectionId)
    {
        
    }

    
}
 *@


@page "/collected-fee"
@using Membership_Management_UI.Models
@using Membership_Management_UI.Services

@inject IFeeCollectionService fService
@inject IMemberService mService
@inject IJSRuntime jsRun

<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <h3>Add Fee Collection</h3>
            @if (errorMessage != null)
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            <div class="mt-4">
                <div class="row">
                    <div class="col-md-12">
                        <form class="needs-validation" @onsubmit="SubmitForm" novalidate>
                            <div class="form-group">
                                <label for="MemberId">Member</label>
                                <input type="text" class="form-control" placeholder="Search members" @oninput="FilterMembers" />
                                <select class="form-control mt-2" id="MemberId" @bind="feeCollection.MemberId" required>
                                    <option value="">Select a member</option>
                                    @foreach (var member in filteredMembers)
                                    {
                                        <option value="@member.MemberId">@member.Name</option>
                                    }
                                </select>
                                <div class="invalid-feedback">Please select a member.</div>
                            </div>
                            <div class="form-group">
                                <label for="CollectionType">Collection Type</label>
                                <select class="form-control" id="CollectionType" @bind="feeCollection.CollectionType" required>
                                    <option value="">Select Type</option>
                                    @foreach (var type in Enum.GetValues(typeof(ECollectType)))
                                    {
                                        <option value="@type.ToString()">@type</option>
                                    }
                                </select>
                                <div class="invalid-feedback">Please select a member.</div>
                            </div>
                            <div class="form-group">
                                <label for="Amount">Amount</label>
                                <input type="number" class="form-control" id="Amount" @bind="feeCollection.Amount" required>
                                <div class="invalid-feedback">Please provide the amount.</div>
                            </div><br />
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-lg-12">
            <h3>All Fee Collections</h3>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="startDate">Start Date</label>
                    <input type="date" class="form-control" id="startDate" @bind="startDate">
                </div>
                <div class="col-md-4">
                    <label for="endDate">End Date</label>
                    <input type="date" class="form-control" id="endDate" @bind="endDate">
                </div>
                <div class="col-md-4">
                    <label for="searchMember">Search Member</label>
                    <input type="text" class="form-control" id="searchMember" @bind="searchMember">
                </div>
            </div>
            @if (feeCollections == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Collection Date</th>
                            <th>Collection Type</th>
                            <th>Amount</th>
                            <th>Member</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (filteredFeeCollections.Any())
                        {
                            @foreach (var feeCollection in filteredFeeCollections)
                            {
                                <tr>
                                    <td>@feeCollection.CollectionDate.ToShortDateString()</td>
                                    <td>@feeCollection.CollectionType</td>
                                    <td>@feeCollection.Amount</td>
                                    <td>
                                        @if (feeCollection.MemberId != null)
                                        {
                                            var member = members.FirstOrDefault(m => m.MemberId == feeCollection.MemberId);
                                            if (member != null)
                                            {
                                                @($"{member.MemberId} - {member.Name}")
                                            }
                                            else
                                            {
                                                <span>Member not found</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>No member associated</span>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4">No fee collections found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>

</div>


@code {
    private FeeCollection feeCollection = new FeeCollection();
    private List<FeeCollection> feeCollections;
    private List<Member> members = new List<Member>();
    private List<Member> filteredMembers = new List<Member>();

    private string errorMessage;
    private DateTime? startDate;
    private DateTime? endDate;
    private string searchMember;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            feeCollections = await fService.GetCollectedFee();
            members = await mService.GetAllMembers();
            filteredMembers = members;
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading data: " + ex.Message;
        }
    }

    private async Task SubmitForm()
    {
        if (IsValidForm())
        {
            try
            {
                await fService.PostFeeCollectionAsync(feeCollection);
                await jsRun.InvokeVoidAsync("location.reload");
            }
            catch (Exception ex)
            {
                errorMessage = "Error adding fee collection: " + ex.Message;
            }
        }
    }

    private bool IsValidForm()
    {
        var isValid = true;

        if (string.IsNullOrWhiteSpace(feeCollection.CollectionDate.ToString()))
        {
            isValid = false;
            errorMessage = "Please provide a collection date.";
        }
        else if (string.IsNullOrWhiteSpace(feeCollection.Amount.ToString()))
        {
            isValid = false;
            errorMessage = "Please provide the amount.";
        }
        else if (feeCollection.MemberId == 0)
        {
            isValid = false;
            errorMessage = "Please select a member.";
        }

        return isValid;
    }

    private void FilterMembers(ChangeEventArgs e)
    {
        string searchText = e.Value?.ToString() ?? "";

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            filteredMembers = members.Where(m => m.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            filteredMembers = members;
        }
    }


    private List<FeeCollection> filteredFeeCollections
    {
        get
        {
            var filteredList = feeCollections;

            if (startDate.HasValue)
            {
                filteredList = filteredList.Where(fc => fc.CollectionDate >= DateTime.Parse(startDate.ToString())).ToList();
            }

            if (endDate.HasValue)
            {
                filteredList = filteredList.Where(fc => fc.CollectionDate <= DateTime.Parse(endDate.ToString())).ToList();
            }

            if (!string.IsNullOrWhiteSpace(searchMember))
            {
                filteredList = filteredList.Where(fc => members.FirstOrDefault(m => m.MemberId == fc.MemberId)?.Name.Contains(searchMember, StringComparison.OrdinalIgnoreCase) ?? false).ToList();
            }

            return filteredList;
        }
    }



    public enum ECollectType
    {
        Daily,
        Monthly
    }
}
