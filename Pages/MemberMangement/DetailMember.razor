@page "/member-details/{id:int}"
@using Membership_Management_UI.Services
@using Membership_Management_UI.Models
@inject IMemberService mService
@inject IDocumentService dService
@inject IFeeCollectionService fService
@inject IJSRuntime JsRuntime


@if (member == null)
{
    <p>Loading...</p>
}
else
{
    <div class="container">

        <div class="row gutters-sm">
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex flex-column align-items-center text-center">
                            <img src="@GetImageUrl(member.Photo)" alt="@member.Name" class="rounded-circle" width="150">
                            <div class="mt-3">
                                <h4>@member.Name</h4>
                                <p><strong>Account Create Date: </strong>@member.CreateDate</p>
                                <p><strong>Membership Activate Date: </strong>@member.ActivaitonDate</p>
                                <p><strong>Membership Expire Date: </strong>@member.ExpDate</p>
                                <p><strong>Membership Amount: </strong>@member.MembershipAmount</p>
                                <p><strong>Status: </strong>@isActiveStatuses[member.IsActive ?? false]</p>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="card mb-3">
                    <div class="card-header bg-primary text-white d-flex">
                        <h4 class="card-title">Member Details</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-sm-3">
                                <h6 class="mb-0">Phone</h6>
                            </div>
                            <div class="col-sm-9 text-secondary">
                                @member.Phone
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-sm-3">
                                <h6 class="mb-0">Date of Birth</h6>
                            </div>
                            <div class="col-sm-9 text-secondary">
                                @member.Dob
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-sm-3">
                                <h6 class="mb-0">Present Address</h6>
                            </div>
                            <div class="col-sm-9 text-secondary">
                                @member.PresentAddress
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-sm-3">
                                <h6 class="mb-0">Permanent Address</h6>
                            </div>
                            <div class="col-sm-9 text-secondary">
                                @member.PermanentAddress
                            </div>
                        </div>

                        <hr>
                        
                        <div class="row">
                            <div class="col-sm-12">
                                <a href="/editMember/@member.MemberId" class="btn btn-info">Edit Profile</a>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card mb-3">
                    <div class="card-header bg-primary text-white d-flex">
                        <h4 class="card-title">Member Documents</h4>
                    </div>

                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-5">
                                <label for="updateNidFile">NID File:</label>
                                @if (!string.IsNullOrEmpty(nid))
                                {
                                    <label for="updateNidFile">@NidFileName()</label>
                                    <br />
                                    <button @onclick="DownloadNidFileFromURL">Download NID PDF</button>
                                }
                                else
                                {
                                    <p>NID Not uploaded</p>
                                }
                            </div>
                            <div class="col-md-5">
                                @if (!string.IsNullOrEmpty(utility))
                                {
                                    <label for="updateUtilityFile">Utility Bill File: </label>
                                    <img src="@GetDoceUrl(utility)" class="img-fluid" style="max-height: 200px; width: auto;" />
                                    <br />
                                    <button @onclick="DownloadUtilityFileFromURL">Download Utility Bill Photo</button>
                                }
                                else
                                {
                                    <p>Utility Bill File Not uploaded</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card mb-3">
            <div class="card-header bg-primary text-white d-flex">
                <h4 class="card-title">Fee Collected</h4>
            </div>

            <div class="card-body">
                <div class="row">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="startDate">Start Date</label>
                            <input type="date" class="form-control" id="startDate" @bind="startDate">
                        </div>
                        <div class="col-md-4">
                            <label for="endDate">End Date</label>
                            <input type="date" class="form-control" id="endDate" @bind="endDate">
                        </div>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Collection Date</th>
                                <th>Collection Type</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredFeeCollections.Any())
                            {
                                @foreach (var feeCollection in filteredFeeCollections)
                                {
                                    <tr>
                                        <td>@feeCollection.CollectionDate.ToShortDateString()</td>
                                        <td>@feeCollection.CollectionType</td>
                                        <td>@feeCollection.Amount</td>
                                       
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4">No fee collections found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}








@code {
    [Parameter]
    public int Id { get; set; }

    private Member member;
    private List<FeeCollection> fee;



    [Inject]
    private NavigationManager navigation { get; set; }

    private DateTime? startDate;
    private DateTime? endDate;


    string nid;
    string utility;



    protected override async Task OnInitializedAsync()
    {
        member = await mService.GetMember(Id);
        nid = await dService.GetNidOfMember(Id);
        utility = await dService.GetUtilityOfMember(Id);
        fee = await fService.GetCollectedFeeById(Id);

    }

    private async Task ShowAlert(string message, int id)
    {
        await JsRuntime.InvokeAsync<object>("alert", message);
        DeleteMember(id);
    }


    public async void DeleteMember(int id)
    {
        try
        {
            await mService.DeleteMember(id);
            navigation.NavigateTo("/allMember", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error Delete Member: {ex.Message}");
        }
    }

    private readonly Dictionary<bool, string> isActiveStatuses = new Dictionary<bool, string>()
    {
        { true, "Active" },
        { false, "Inactive" }
    };


    private string GetImageUrl(string filePath)
    {
        if (string.IsNullOrEmpty(filePath))
        {
            return "No Image";
        }

        string baseUrl = "http://localhost:10699/";
        string fileName = Path.GetFileName(filePath);
        return Path.Combine(baseUrl + "MemberImage/", fileName);
    }

    private string GetDoceUrl(string filePath)
    {
        if (string.IsNullOrEmpty(filePath))
        {
            return "No Image";
        }

        string baseUrl = "http://localhost:10699/";
        string fileName = Path.GetFileName(filePath);
        return Path.Combine(baseUrl + "DocumentImage/", fileName);
    }


    private string NidFileName()
    {
        string nidFilePath = nid;
        string nidFileName = nidFilePath.Substring(nidFilePath.LastIndexOf("Nid_") + "Nid_".Length);
        return nidFileName;
    }

    private string UtilityFileName()
    {
        string utilityFilepath = utility;
        string utilityFileName = utilityFilepath.Substring(utilityFilepath.LastIndexOf("UtilityBill_") + "UtilityBill_".Length);
        return utilityFileName;
    }



    private async Task DownloadNidFileFromURL()
    {
        var fileName = "myNid.pdf";
        var fileURL = GetDoceUrl(nid);
        await JsRuntime.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
    }

    private async Task DownloadUtilityFileFromURL()
    {
        var fileName = "myUtility.pdf";
        var fileURL = GetDoceUrl(utility);
        await JsRuntime.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
    }


    private List<FeeCollection> filteredFeeCollections
    {
        get
        {
            var filteredList = fee ?? new List<FeeCollection>();

            if (startDate.HasValue)
            {
                filteredList = filteredList.Where(fc => fc.CollectionDate >= DateTime.Parse(startDate.ToString())).ToList();
            }

            if (endDate.HasValue)
            {
                filteredList = filteredList.Where(fc => fc.CollectionDate <= DateTime.Parse(endDate.ToString())).ToList();
            }

            return filteredList;
        }
    }

}
