@page "/crudPackage"
@using Membership_Management_UI.Services
@using Membership_Management_UI.Models
@inject IPackageService _pService
@inject IJSRuntime jsRun


<h3>Package CRUD</h3>

<div class="crud-form">
    <h4>@(selectedPackage != null ? "Edit Package" : "Add Package")</h4>
    <EditForm Model="@selectedPackage" OnValidSubmit="SavePackage">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <InputText type="hidden" id="packageName" class="form-control" @bind-Value="selectedPackage.PackageName" readonly/>
        </div>

        <div class="form-group">
            <label for="packageName">Package Name</label>
            <InputText id="packageName" class="form-control" @bind-Value="selectedPackage.PackageName" />
        </div>
        <div class="form-group">
            <label for="packagePrice">Package Price</label>
            <InputNumber id="packagePrice" class="form-control" @bind-Value="selectedPackage.PackagePrice" TValue="decimal?" />
        </div>
        <div class="form-group">
            <label for="paymentType">Payment Type</label>
            <InputText id="paymentType" class="form-control" @bind-Value="selectedPackage.PaymentType" />
        </div>
        <div class="form-group">
            <label for="duration">Duration</label>
            <InputNumber id="duration" class="form-control" @bind-Value="selectedPackage.Duration" TValue="int?" />
        </div>
@*         <div class="form-group">
            <label for="isActive">Is Active</label>
            <InputCheckbox id="isActive" @bind-Value="selectedPackage.IsActive ?? false" />
        </div> *@



        <button type="submit" class="btn btn-primary">@((selectedPackage != null) ? "Update" : "Add")</button>
        <button type="button" class="btn btn-secondary" @onclick="ClearForm">Clear</button>
    </EditForm>
   
</div>

<div class="package-list">
    <h4>Package List</h4>

    <table class="table">
        <thead>
            <tr>
                <th>Package Name</th>
                <th>Package Price</th>
                <th>Payment Type</th>
                <th>Duration</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var package in packages)
            {
                <tr>
                    <td>@package.PackageName</td>
                    <td>@package.PackagePrice</td>
                    <td>@package.PaymentType</td>
                    <td>@package.Duration</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() =>  EditPackage(package)">Edit</button>
                        <button class="btn btn-danger" @onclick="() =>  DeletePackage(package.PackageId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>






@code {
    private List<Package> packages = new List<Package>();
    private Package selectedPackage = new Package();

    protected override async Task OnInitializedAsync()
    {
        packages = await _pService.GetAll();
    }



    private async Task SavePackage()
    {
        if (selectedPackage.PackageId == 0)
        {
            await _pService.Add(selectedPackage);
            await jsRun.InvokeVoidAsync("location.reload");
        }
        else
        {
            await _pService.Update(selectedPackage.PackageId, selectedPackage);
            await jsRun.InvokeVoidAsync("location.reload");
        }

    }

    private void ClearForm()
    {
        selectedPackage = new Package();
    }


    private async Task EditPackage(Package package)
    {
        selectedPackage = await _pService.GetById(package.PackageId);
    }

    private async Task DeletePackage(int packageId)
    {
        await _pService.Delete(packageId);
        await jsRun.InvokeVoidAsync("location.reload");
        
    }
}