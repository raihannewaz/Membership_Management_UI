@page "/payment"

@using Membership_Management_UI.Models
@using Membership_Management_UI.Services

@inject IPaymentService paymentService
@inject IPackageService pService
@inject IMemberService memberService
@inject IMemberPackageService mpService
@inject IPackageService pService
@inject IJSRuntime jsRuntime

<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <h3>Add Payment</h3>
            @if (errorMessage != null)
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            <div class="mt-4">
                <div class="row">
                    <div class="col-md-12">
                        <form class="needs-validation" @onsubmit="SubmitForm" novalidate>
                            <div class="form-group">
                                <label for="MemberId">Member</label>
                                <input type="text" class="form-control" placeholder="Search members" />
                                <select class="form-control mt-2" id="MemberId" @bind="payment.MemberPackageID" required>
                                    <option value="">Select a member</option>
                                    @foreach (var memberPackage in memberPackages)
                                    {
                                        <option value="@memberPackage.MemberPackageID">
                                            @if (memberPackage != null && memberPackage.Member != null && memberPackage.Package !=null)
                                            {
                                                <span>@memberPackage.Member.Name -> @memberPackage.Package.PackageName</span>
                                            }
                                            else
                                            {
                                                <span>N/A</span>
                                            }
                                        </option>
                                    }
                                </select>



                                <div class="invalid-feedback">Please select a member.</div>
                            </div>


                            <div class="form-group">
                                <label for="PaymentType">Payment Type</label>
                                <select class="form-control" id="PaymentType" @bind="payment.PaymentType" required>
                                    <option value="">Select Type</option>
                                    @foreach (var type in Enum.GetValues(typeof(ECollectType)))
                                    {
                                        <option value="@type.ToString()">@type</option>
                                    }
                                </select>
                                <div class="invalid-feedback">Please select a Type.</div>
                            </div>
                            <div class="form-group">
                                <label for="ActualAmount">Actual Amount</label>
                                <input type="number" class="form-control" id="ActualAmount" @bind="payment.ActualAmount" required>
                                <div class="invalid-feedback">Please provide the actual amount.</div>
                            </div>
                            <div class="form-group">
                                <label for="PaidInAdvance">Paid In Advance</label>
                                <input id="PaidInAdvance" type="checkbox" class="form-check-input" @bind="payment.PaidInAdvance" />
                                <div class="invalid-feedback">Please specify if the payment is made in advance.</div>
                            </div>
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-lg-12">
            <h3>All Payments</h3>
            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="startDate">Start Date</label>
                    <input type="date" class="form-control" id="startDate" @bind="startDate">
                </div>
                <div class="col-md-4">
                    <label for="endDate">End Date</label>
                    <input type="date" class="form-control" id="endDate" @bind="endDate">
                </div>
                <div class="col-md-4">
                    <label for="searchMember">Search Member</label>
                    <input type="text" class="form-control" id="searchMember" @bind="searchMember">
                </div>
            </div>
            @if (payments == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Payment Date</th>
                            <th>Payment Type</th>
                            <th>Actual Amount</th>
                            <th>Member</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (filteredPayments.Any())
                        {
                            @foreach (var payment in filteredPayments)
                            {
                                <tr>
                                    <td>@payment.PaymentDate.ToShortDateString()</td>
                                    <td>@payment.PaymentType</td>
                                    <td>@payment.ActualAmount</td>
                                    <td>
                                        @if (payment.MemberPackage != null && payment.MemberPackage.Member != null)
                                        {
                                            @payment.MemberPackage.MemberID
                                        }
                                        else
                                        {
                                            <span>N/A</span>

                                            @if (payment.MemberPackage == null)
                                            {
                                                Console.WriteLine("MemberPackage is null");
                                            }
                                            else if (payment.MemberPackage.Member == null)
                                            {
                                                Console.WriteLine("Member is null");
                                            }
                                        }
                                    </td>
                                </tr>
                            }
                        }

                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

@code {
    private Payment payment = new Payment();
    private List<Payment> payments;
    private List<MemberPackage> memberPackages = new List<MemberPackage>();
    private List<Member> members;
    private List<Package> pack = new List<Package>();
    private List<Member> filteredMembers = new List<Member>();
    private string errorMessage;
    private DateTime? startDate;
    private DateTime? endDate;
    private string searchMember;
    private int selectedMemberId;
    private List<MemberPackage> filteredMemberPackages = new List<MemberPackage>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            payments = await paymentService.GetAll();
            memberPackages = await mpService.GetAll();
            //members = await memberService.GetAllMembers();
            //pack = await pService.GetAll();


            foreach (var memberPackage in memberPackages)
            {
                memberPackage.Member = await memberService.GetMember(memberPackage.MemberID);
                memberPackage.Package = await pService.GetById(memberPackage.PackageID);
            }

            foreach (var pay in payments)
            {
                if (pay.MemberPackage != null)
                {
                    pay.MemberPackage.Member = await memberService.GetMember(pay.MemberPackage.MemberID);
                }
            }


        }
        catch (Exception ex)
        {
            errorMessage = "Error loading data: " + ex.Message;
        }
    }


    // Assuming dbContext is your DbContext instance







    private async Task SubmitForm()
    {
        if (IsValidForm())
        {
            try
            {
                await paymentService.Add(payment);
                await jsRuntime.InvokeVoidAsync("location.reload");
            }
            catch (Exception ex)
            {
                errorMessage = "Error adding payment: " + ex.Message;
            }
        }
    }

    private bool IsValidForm()
    {
        var isValid = true;

        if (string.IsNullOrWhiteSpace(payment.PaymentDate.ToString()))
        {
            isValid = false;
            errorMessage = "Please provide a payment date.";
        }
        else if (string.IsNullOrWhiteSpace(payment.ActualAmount.ToString()))
        {
            isValid = false;
            errorMessage = "Please provide the actual amount.";
        }
        else if (payment.MemberPackageID == 0)
        {
            isValid = false;
            errorMessage = "Please select a member package.";
        }

        return isValid;
    }



    private async Task OnSelectedMemberChanged()
    {
        try
        {
            if (selectedMemberId != 0)
            {
                filteredMemberPackages = await mpService.GetById(selectedMemberId);
                if (filteredMemberPackages != null && filteredMemberPackages.Any())
                {
                    payment.MemberPackageID = filteredMemberPackages.First().MemberPackageID;
                }
                else
                {
                    payment.MemberPackageID = 0;
                }
            }
            else
            {
                filteredMemberPackages.Clear();
                payment.MemberPackageID = 0;
            }

            Console.WriteLine($"Filtered member packages count: {filteredMemberPackages.Count}");
        }
        catch (Exception ex)
        {
            errorMessage = "Error retrieving member packages: " + ex.Message;
            Console.WriteLine(errorMessage); 
        }
    }



    private int SelectedMemberId
    {
        get => selectedMemberId;
        set
        {
            selectedMemberId = value;
            OnSelectedMemberChanged();
        }
    }

    private List<Payment> filteredPayments
    {
        get
        {
            var filteredList = payments;

            if (startDate.HasValue)
            {
                filteredList = filteredList.Where(p => p.PaymentDate >= DateTime.Parse(startDate.ToString())).ToList();
            }

            if (endDate.HasValue)
            {
                filteredList = filteredList.Where(p => p.PaymentDate <= DateTime.Parse(endDate.ToString())).ToList();
            }

            if (!string.IsNullOrWhiteSpace(searchMember))
            {
                filteredList = filteredList.Where(p => p.MemberPackage.Member.Name.Contains(searchMember, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            return filteredList;
        }
    }

    public enum ECollectType
    {
        Daily,
        Monthly
    }
}
